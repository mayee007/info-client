pipeline {
    agent { 
		label 'kubeworker1'
	}

    parameters { 
        string(name: 'mavenGroupId', defaultValue: 'com.mine', description: '')
        string(name: 'mavenArtifactId', defaultValue: 'info-client', description: '')
        string(name: 'artifactName', defaultValue: 'info-client.war', description: '')
        string(name: 'version', defaultValue: '1.1.0', description: '')
        string(name: 'packaging', defaultValue: 'war', description: '')
        string(name: 'destination', defaultValue: '/home/vagrant/workspace/docker_builds/info-client', description: '')
        string(name: 'dockerImageTag', defaultValue: '192.168.99.100:5000/info-client:latest', description: '')
        
    }

    stages {
        stage('Preparation') {
            
            steps {
	       // github repository 
               git 'https://github.com/mayee007/info-client.git'
            }
        }
        stage('Build') {
            steps {
               sh 'mvn clean package -e checkstyle:checkstyle -Dspring.profiles.active=dev'
            }
        }
        stage('Analysis') { 
            parallel { 
                stage('Code Coverage') {
                    steps {
                       checkstyle canComputeNew: false, defaultEncoding: '', healthy: '', pattern: '**/checkstyle-result.xml', unHealthy: ''
                    }
                }
                stage('Test Coverage') {
                    steps {
                        jacoco maximumBranchCoverage: '90', maximumClassCoverage: '80', maximumComplexityCoverage: '70', maximumInstructionCoverage: '50', maximumLineCoverage: '65', maximumMethodCoverage: '70'
                        
                        //send surefire reports 
                        junit 'target/surefire-reports/*.xml'
                        
                        sh 'printenv'
                    }
                }
            }
        }
        stage('Convert') {
            steps {
                sh "./createProductionWar.sh ${params.artifactName}"
            }
        }
        stage('DockerImage') {
            steps {
		sh "docker build -t ${params.dockerImageTag} ."
		sh "docker push ${params.dockerImageTag}"
            }
        }
    }
}
